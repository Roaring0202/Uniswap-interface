import { ChainId, Percent, Token, WETH9 } from '@uniswap/sdk-core'
import { FeeAmount, NONFUNGIBLE_POSITION_MANAGER_ADDRESS, TICK_SPACINGS } from './constants'
import { Pool } from './entities/pool'
import { Position } from './entities/position'
import { NonfungiblePositionManager } from './nonfungiblePositionManager'
import { encodeSqrtRatioX96 } from './utils/encodeSqrtRatioX96'

const ADDRESS_THREE = '0x0000000000000000000000000000000000000003'
describe('NonfungiblePositionManager', () => {
  const token0 = new Token(ChainId.MAINNET, '0x0000000000000000000000000000000000000001', 18, 't0', 'token0')
  const token1 = new Token(ChainId.MAINNET, '0x0000000000000000000000000000000000000002', 18, 't1', 'token1')

  const pool_0_1 = new Pool(token0, token1, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1), 0, 0, [])
  const pool_weth_0 = new Pool(WETH9[ChainId.MAINNET], token0, FeeAmount.MEDIUM, encodeSqrtRatioX96(1, 1), 0, 0, [])

  describe('#increaseCallParameters', () => {
    it('throws if liquidity is 0', () => {
      expect(() =>
        NonfungiblePositionManager.increaseCallParameters(
          Position.fromAmounts({
            pool: pool_0_1,
            tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
            tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
            amount0: 0,
            amount1: 0
          }),
          { recipient: ADDRESS_THREE, slippageTolerance: new Percent(1), useEther: false, deadline: 100 }
        )
      ).toThrow('LIQUIDITY')
    })
    it('throws if pool does not involve ether and useEther is true', () => {
      expect(() =>
        NonfungiblePositionManager.increaseCallParameters(
          Position.fromAmounts({
            pool: pool_0_1,
            tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
            tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
            amount0: 100,
            amount1: 100
          }),
          { recipient: ADDRESS_THREE, slippageTolerance: new Percent(1), useEther: true, deadline: 100 }
        )
      ).toThrow('NO_WETH')
    })

    it('succeeds for just mint', () => {
      const callInfo = NonfungiblePositionManager.increaseCallParameters(
        Position.fromAmounts({
          pool: pool_0_1,
          tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
          tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
          amount0: 100,
          amount1: 100
        }),
        { recipient: ADDRESS_THREE, slippageTolerance: new Percent(1), useEther: false, deadline: 100 }
      )

      expect(callInfo.calldata).toEqual(
        '0x88316456000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc4000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000064'
      )
    })

    it('succeeds for mint and create', () => {
      const { calldata, value } = NonfungiblePositionManager.increaseCallParameters(
        Position.fromAmounts({
          pool: pool_0_1,
          tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
          tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
          amount0: 100,
          amount1: 100
        }),
        {
          recipient: ADDRESS_THREE,
          slippageTolerance: new Percent(1),
          useEther: false,
          deadline: 100,
          createPool: true
        }
      )

      expect(calldata).toEqual(
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000008413ead562000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb8000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016488316456000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000bb8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc4000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toEqual('0x00')
    })

    it('succeeds for mint and create using ether', () => {
      const { calldata, value } = NonfungiblePositionManager.increaseCallParameters(
        Position.fromAmounts({
          pool: pool_weth_0,
          tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
          tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
          amount0: 100,
          amount1: 100
        }),
        {
          recipient: ADDRESS_THREE,
          slippageTolerance: new Percent(1),
          useEther: true,
          deadline: 100,
          createPool: true
        }
      )

      expect(calldata).toEqual(
        '0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c0000000000000000000000000000000000000000000000000000000000000008413ead5620000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb80000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000164883164560000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000bb8ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc4000000000000000000000000000000000000000000000000000000000000003ce8a00000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toEqual('0x64')
    })
  })

  describe('#increaseLiquidityParameters', () => {
    it('throws if liquidity is 0', () => {
      expect(() =>
        NonfungiblePositionManager.increaseCallParameters(
          Position.fromAmounts({
            pool: pool_0_1,
            tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
            tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
            amount0: 0,
            amount1: 0
          }),
          { slippageTolerance: new Percent(1), useEther: false, deadline: 100, tokenId: 123456 }
        )
      ).toThrow('LIQUIDITY')
    })
    it('throws if pool does not involve ether and useEther is true', () => {
      expect(() =>
        NonfungiblePositionManager.increaseCallParameters(
          Position.fromAmounts({
            pool: pool_0_1,
            tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
            tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
            amount0: 100,
            amount1: 100
          }),
          { slippageTolerance: new Percent(1), useEther: true, deadline: 100, tokenId: 123456 }
        )
      ).toThrow('NO_WETH')
    })

    it('succeeds for increase liquidity', () => {
      const { calldata, value } = NonfungiblePositionManager.increaseCallParameters(
        Position.fromAmounts({
          pool: pool_0_1,
          tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
          tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
          amount0: 100,
          amount1: 100
        }),
        { slippageTolerance: new Percent(1), useEther: false, deadline: 100, tokenId: 123456 }
      )

      expect(calldata).toEqual(
        '0x219f5d17000000000000000000000000000000000000000000000000000000000001e24000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064'
      )
      expect(value).toEqual('0x00')
    })

    it('succeeds for increase liquidity with ether', () => {
      const { calldata, value } = NonfungiblePositionManager.increaseCallParameters(
        Position.fromAmounts({
          pool: pool_weth_0,
          tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
          tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
          amount0: 100,
          amount1: 100
        }),
        { slippageTolerance: new Percent(1), useEther: true, deadline: 100, tokenId: 123456 }
      )

      expect(calldata).toEqual(
        '0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000c4219f5d17000000000000000000000000000000000000000000000000000000000001e2400000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412210e8a00000000000000000000000000000000000000000000000000000000'
      )
      expect(value).toEqual('0x64')
    })
  })

  describe('#decreaseCallParameters', () => {
    it('works for the simple case', () => {
      expect(
        NonfungiblePositionManager.decreaseCallParameters(
          Position.fromAmounts({
            pool: pool_0_1,
            tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
            tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
            amount0: 100,
            amount1: 100
          }),
          {
            recipient: ADDRESS_THREE,
            liquidityPercentage: new Percent(1),
            slippageTolerance: new Percent(1),
            receiveEther: false,
            deadline: 200,
            tokenId: 1,
            nonfungiblePositionManagerAddressOverride: NONFUNGIBLE_POSITION_MANAGER_ADDRESS
          }
        ).calldata
      ).toEqual(
        '0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a40c49ccbe000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000082690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084fc6f78650000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000'
      )
    })

    it('works for ETH', () => {
      expect(
        NonfungiblePositionManager.decreaseCallParameters(
          Position.fromAmounts({
            pool: pool_weth_0,
            tickLower: -TICK_SPACINGS[FeeAmount.MEDIUM],
            tickUpper: TICK_SPACINGS[FeeAmount.MEDIUM],
            amount0: 100,
            amount1: 100
          }),
          {
            recipient: ADDRESS_THREE,
            liquidityPercentage: new Percent(1),
            slippageTolerance: new Percent(1),
            receiveEther: true,
            deadline: 200,
            tokenId: 1,
            nonfungiblePositionManagerAddressOverride: NONFUNGIBLE_POSITION_MANAGER_ADDRESS
          }
        ).calldata
      ).toEqual(
        '0xac9650d80000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000a40c49ccbe000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000082690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000084fc6f786500000000000000000000000000000000000000000000000000000000000000010000000000000000000000001f98431c8ad98523631ae4a59f267346ea31f98400000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000ffffffffffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064df2ab5bb00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000'
      )
    })
  })
})
